[Tests]
  design = 'DiffusionLHDGKernel.md DiffusionLHDGDirichletBC.md DiffusionLHDGPrescribedGradientBC.md'
  issues = '#26406'
  [diffusion]
    requirement = 'The system shall be to solve a simple diffusion problem using a hybridized discontinuous Galerkin discretization'
    [noncondensed]
      input = 'diffusion.i'
      csvdiff = 'noncondensed_diffusion_out.csv'
      type = CSVDiff
      detail = 'in which the matrix is uncondensed, and'
      cli_args = 'Outputs/file_base=noncondensed_diffusion_out'
    []
    [condensed]
      cli_args = '--nl0-static-condensation -nl0_condensed_pc_type hypre -ksp_type preonly -nl0_condensed_ksp_view_pmat binary Outputs/print_linear_residuals=false Postprocessors/symmetric/mat=binaryoutput'
      input = 'diffusion.i'
      csvdiff = 'diffusion_out.csv'
      type = CSVDiff
      detail = 'in which the matrix is statically condensed.'
    []
  []
  [mms]
    requirement = 'The system shall show second order convergence in the L2 norm of the scalar field with a first order basis using a hybridized discontinuous Galerkin discretization on'
    [tri]
      type = PythonUnitTest
      input = test.py
      test_case = TestLagrangeTri
      capabilities = 'method!=dbg'
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'simplex elements and'
    []
    [quad]
      type = PythonUnitTest
      input = test.py
      test_case = TestLagrangeQuad
      capabilities = 'method!=dbg'
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'tensor-product elements.'
    []
  []
  [rt_mms]
    requirement = 'The system shall show first order convergence in the L2 norm of the scalar field when using constants for the scalar basis and first order L2 Raviart-Thomas basis functions for the vector field in a hybridized mixed method on'
    [tri]
      type = PythonUnitTest
      input = test.py
      test_case = TestRTTri
      capabilities = 'method!=dbg'
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'simplex elements and'
    []
    [quad]
      type = PythonUnitTest
      input = test.py
      test_case = TestRTQuad
      capabilities = 'method!=dbg'
      required_python_packages = 'pandas matplotlib'
      installation_type = in_tree
      valgrind = 'none'
      detail = 'tensor-product elements.'
    []
  []
  [prescribed_nonzero_flux]
    requirement = 'The system shall be able to apply a non-zero normal gradient boundary condition for the primal scalar field.'
    input = 'diffusion.i'
    csvdiff = 'prescribed_gradient.csv'
    type = CSVDiff
    cli_args = "BCs/inactive='right' Outputs/file_base=prescribed_gradient --nl0-static-condensation -nl0_condensed_pc_type hypre -ksp_type preonly -nl0_condensed_ksp_view_pmat binary Outputs/print_linear_residuals=false Postprocessors/symmetric/mat=binaryoutput"
  []
  [scaling_factors]
    requirement = 'The system shall not error if a user attempts to use a non-unity scaling factor for a variable in a hybridized Discontinuous Galerkin discretization with a statically condensed equation system.'
    input = diffusion.i
    type = CSVDiff
    cli_args = 'Variables/face_u/scaling=2 --nl0-static-condensation -nl0_condensed_pc_type hypre -ksp_type preonly Outputs/print_linear_residuals=false Postprocessors/symmetric/mat=binaryoutput'
    csvdiff = 'diffusion_out.csv'
    prereq = 'diffusion/condensed'
  []
[]
